Program:
MainClass:
:CLASS
Identifier:MainTest
LBRACKET:{
:PUBLIC
:STATIC
:VOID
:MAIN
LP:(
:String
LSQUAREP:[
RSQUAREP:]
Identifier:a
RP:)
LBRACKET:{
PrintStatement:
PRINT:System.out.println
LP:(
MethodCallExpressionWithoutArgs:
NewClassExpression:
NEW:new
Identifier:TestClass1
LP:(
RP:)
PERIOD:.
Identifier:TestMethod1Class1
LP:(
RP:)
RP:)
SEMICOLON:;
RBRACKET:}
RBRACKET:}
ClassDeclarationList:
ClassDeclaration:
:CLASS
Identifier:TestClass1
LBRACKET:{
MethodDeclarationList:
MethodDeclaration:
:public
TYPE:int
Identifier:TestMethod1Class1
LP:(
RP:)
LBRACKET:{
VarDeclarationList:
VarDeclarationList:
VarDeclarationList:
VarDeclarationList:
VarDeclarationList:
VarDeclarationList:
VarDeclaration:
TYPE:boolean
Identifier:a
SEMICOLON:;
VarDeclaration:
TYPE:boolean
Identifier:b
SEMICOLON:;
VarDeclaration:
TYPE:boolean
Identifier:c
SEMICOLON:;
VarDeclaration:
TYPE:boolean
Identifier:d
SEMICOLON:;
VarDeclaration:
TYPE:boolean
Identifier:e
SEMICOLON:;
VarDeclaration:
TYPE:int
Identifier:f
SEMICOLON:;
VarDeclaration:
TYPE:int
Identifier:g
SEMICOLON:;
StatementList:
StatementList:
StatementList:
StatementList:
StatementList:
StatementList:
AssignmentStatement:
Identifier:a
EQUALS:=
INTEGER:2
SEMICOLON:;
AssignmentStatement:
Identifier:b
EQUALS:=
MethodCallExpressionWithoutArgs:
:this
PERIOD:.
Identifier:TestMethod2Class1
LP:(
RP:)
SEMICOLON:;
AssignmentStatement:
Identifier:c
EQUALS:=
MethodCallExpressionWithoutArgs:
Identifier:TestClass2
PERIOD:.
Identifier:TestMethod1Class2
LP:(
RP:)
SEMICOLON:;
AssignmentStatement:
Identifier:d
EQUALS:=
MethodCallExpressionWithoutArgs:
Identifier:TestClass2
PERIOD:.
Identifier:TestMethod2Class2
LP:(
RP:)
SEMICOLON:;
AssignmentStatement:
Identifier:e
EQUALS:=
LESSERExpression:
INTEGER:1
LESSER:<
INTEGER:2
SEMICOLON:;
AssignmentStatement:
Identifier:f
EQUALS:=
MinusExpression:
PlusExpression:
PlusExpression:
INTEGER:1
PLUS:+
INTEGER:2
PLUS:+
MultExpression:
INTEGER:4
MULTOP:*
INTEGER:5
MINUS:-
INTEGER:6
SEMICOLON:;
AssignmentStatement:
Identifier:g
EQUALS:=
LITERAL:true
SEMICOLON:;
:return
Identifier:f
SEMICOLON:;
RBRACKET:}
MethodDeclaration:
:public
TYPE:int
Identifier:TestMethod2Class1
LP:(
RP:)
LBRACKET:{
:return
INTEGER:0
SEMICOLON:;
RBRACKET:}
RBRACKET:}
ClassDeclaration:
:CLASS
Identifier:TestClass2
LBRACKET:{
MethodDeclarationList:
MethodDeclaration:
:public
TYPE:int
Identifier:TestMethod1Class2
LP:(
RP:)
LBRACKET:{
VarDeclaration:
TYPE:int
Identifier:a
SEMICOLON:;
AssignmentStatement:
Identifier:a
EQUALS:=
INTEGER:1
SEMICOLON:;
:return
Identifier:a
SEMICOLON:;
RBRACKET:}
MethodDeclaration:
:public
TYPE:boolean
Identifier:TestMethod2Class2
LP:(
RP:)
LBRACKET:{
:return
LITERAL:true
SEMICOLON:;
RBRACKET:}
RBRACKET:}
