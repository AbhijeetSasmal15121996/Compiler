Program:
MainClass:
:CLASS
Identifier:FacFib
LBRACKET:{
:PUBLIC
:STATIC
:VOID
:MAIN
LP:(
:String
LSQUAREP:[
RSQUAREP:]
Identifier:a
RP:)
LBRACKET:{
PrintStatement:
PRINT:System.out.println
LP:(
MethodCallExpression:
NewClassExpression:
NEW:new
Identifier:FacFib2
LP:(
RP:)
PERIOD:.
Identifier:Compute
LP:(
ExpressionList:
INTEGER:5
COMMA:,
INTEGER:10
RP:)
RP:)
SEMICOLON:;
RBRACKET:}
RBRACKET:}
ClassDeclaration:
:CLASS
Identifier:FacFib2
LBRACKET:{
MethodDeclarationList:
MethodDeclarationList:
MethodDeclaration:
:public
TYPE:int
Identifier:Compute
LP:(
ParameterList:
TYPE:int
Identifier:first
COMMA:,
ParameterList:
TYPE:int
Identifier:second
RP:)
LBRACKET:{
VarDeclarationList:
VarDeclarationList:
VarDeclaration:
TYPE:int
Identifier:fac
SEMICOLON:;
VarDeclaration:
TYPE:int
Identifier:fib
SEMICOLON:;
VarDeclaration:
TYPE:int
Identifier:returnValue
SEMICOLON:;
IFStatement:
IF:if
LP:(
AndExpression:
NOTExpression:
NOT:!
ParenExpression:
LP:(
LESSERExpression:
Identifier:first
LESSER:<
INTEGER:1
RP:)
AND:&&
NOTExpression:
NOT:!
ParenExpression:
LP:(
LESSERExpression:
Identifier:second
LESSER:<
INTEGER:1
RP:)
RP:)
Statement:
LBRACKET:{
StatementList:
StatementList:
StatementList:
StatementList:
AssignmentStatement:
Identifier:fac
EQUALS:=
MethodCallExpression:
:this
PERIOD:.
Identifier:ComputeFac
LP:(
Identifier:first
RP:)
SEMICOLON:;
PrintStatement:
PRINT:System.out.println
LP:(
Identifier:fac
RP:)
SEMICOLON:;
AssignmentStatement:
Identifier:fib
EQUALS:=
MethodCallExpression:
:this
PERIOD:.
Identifier:ComputeFib
LP:(
Identifier:second
RP:)
SEMICOLON:;
PrintStatement:
PRINT:System.out.println
LP:(
Identifier:fib
RP:)
SEMICOLON:;
AssignmentStatement:
Identifier:returnValue
EQUALS:=
INTEGER:1
SEMICOLON:;
RBRACKET:}
ELSE:else
Statement:
LBRACKET:{
AssignmentStatement:
Identifier:returnValue
EQUALS:=
INTEGER:0
SEMICOLON:;
RBRACKET:}
:return
Identifier:returnValue
SEMICOLON:;
RBRACKET:}
MethodDeclaration:
:public
TYPE:int
Identifier:ComputeFac
LP:(
ParameterList:
TYPE:int
Identifier:num
RP:)
LBRACKET:{
VarDeclaration:
TYPE:int
Identifier:fac
SEMICOLON:;
IFStatement:
IF:if
LP:(
LESSERExpression:
Identifier:num
LESSER:<
INTEGER:1
RP:)
AssignmentStatement:
Identifier:fac
EQUALS:=
INTEGER:1
SEMICOLON:;
ELSE:else
AssignmentStatement:
Identifier:fac
EQUALS:=
MultExpression:
Identifier:num
MULTOP:*
ParenExpression:
LP:(
MethodCallExpression:
:this
PERIOD:.
Identifier:ComputeFac
LP:(
MinusExpression:
Identifier:num
MINUS:-
INTEGER:1
RP:)
RP:)
SEMICOLON:;
:return
Identifier:fac
SEMICOLON:;
RBRACKET:}
MethodDeclaration:
:public
TYPE:int
Identifier:ComputeFib
LP:(
ParameterList:
TYPE:int
Identifier:num
RP:)
LBRACKET:{
VarDeclarationList:
VarDeclarationList:
VarDeclarationList:
VarDeclaration:
TYPE:int
Identifier:f0
SEMICOLON:;
VarDeclaration:
TYPE:int
Identifier:f1
SEMICOLON:;
VarDeclaration:
TYPE:int
Identifier:fib
SEMICOLON:;
VarDeclaration:
TYPE:int
Identifier:i
SEMICOLON:;
StatementList:
StatementList:
StatementList:
StatementList:
AssignmentStatement:
Identifier:f0
EQUALS:=
INTEGER:0
SEMICOLON:;
AssignmentStatement:
Identifier:f1
EQUALS:=
INTEGER:1
SEMICOLON:;
AssignmentStatement:
Identifier:fib
EQUALS:=
Identifier:num
SEMICOLON:;
AssignmentStatement:
Identifier:i
EQUALS:=
INTEGER:1
SEMICOLON:;
WHILEStatement:
WHILE:while
LP:(
LESSERExpression:
Identifier:i
LESSER:<
Identifier:num
RP:)
Statement:
LBRACKET:{
StatementList:
StatementList:
StatementList:
AssignmentStatement:
Identifier:fib
EQUALS:=
PlusExpression:
Identifier:f1
PLUS:+
Identifier:f0
SEMICOLON:;
AssignmentStatement:
Identifier:f0
EQUALS:=
Identifier:f1
SEMICOLON:;
AssignmentStatement:
Identifier:f1
EQUALS:=
Identifier:fib
SEMICOLON:;
AssignmentStatement:
Identifier:i
EQUALS:=
PlusExpression:
Identifier:i
PLUS:+
INTEGER:1
SEMICOLON:;
RBRACKET:}
:return
Identifier:fib
SEMICOLON:;
RBRACKET:}
RBRACKET:}
