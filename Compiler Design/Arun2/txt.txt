R53 BinaryTree R53 a R53 BT R48 R53 Start R52 R30 R3 R1 R53 BT R22 R53 Start R53 Tree R21 R53 root R13 R11 R23 R53 ntb R13 R12 R22 R53 nti R13 R12 R53 root R53 Tree R48 R31 R25 R53 ntb R53 root R35 R53 Init R36 R33 R51 R31 R26 R53 ntb R53 root R35 R53 Print R52 R31 R26 R36 R30 R26 R53 ntb R53 root R35 R53 Insert R36 R33 R51 R31 R26 R53 ntb R53 root R35 R53 Print R52 R31 R26 R53 ntb R53 root R35 R53 Insert R36 R33 R51 R31 R26 R53 ntb R53 root R35 R53 Insert R36 R33 R51 R31 R26 R53 ntb R53 root R35 R53 Insert R36 R33 R51 R31 R26 R53 ntb R53 root R35 R53 Insert R36 R33 R51 R31 R26 R53 ntb R53 root R35 R53 Insert R36 R33 R51 R31 R26 R53 ntb R53 root R35 R53 Insert R36 R33 R51 R31 R26 R53 ntb R53 root R35 R53 Print R52 R31 R26 R53 root R35 R53 Search R36 R33 R51 R30 R26 R53 root R35 R53 Search R36 R33 R51 R30 R26 R53 root R35 R53 Search R36 R33 R51 R30 R26 R53 root R35 R53 Search R36 R33 R51 R30 R26 R53 root R35 R53 Search R36 R33 R51 R30 R26 R53 ntb R53 root R35 R53 Delete R36 R33 R51 R31 R26 R53 ntb R53 root R35 R53 Print R52 R31 R26 R53 root R35 R53 Search R36 R33 R51 R30 R26 R36 R16 R14 R8 R5 R53 Tree R53 Tree R21 R53 left R13 R11 R53 Tree R21 R53 right R13 R12 R22 R53 key R13 R12 R23 R53 has_left R13 R12 R23 R53 has_right R13 R12 R53 Tree R21 R53 my_null R13 R12 R23 R53 Init R22 R53 v_key R19 R53 key R53 v_key R35 R31 R25 R53 has_left R38 R31 R26 R53 has_right R38 R31 R26 R37 R17 R14 R23 R53 SetRight R53 Tree R21 R53 rn R19 R53 right R53 rn R35 R31 R25 R37 R17 R15 R23 R53 SetLeft R53 Tree R21 R53 ln R19 R53 left R53 ln R35 R31 R25 R37 R17 R15 R53 Tree R21 R53 GetRight R53 right R35 R18 R15 R53 Tree R21 R53 GetLeft R53 left R35 R18 R15 R22 R53 GetKey R53 key R35 R18 R15 R23 R53 SetKey R22 R53 v_key R19 R53 key R53 v_key R35 R31 R25 R37 R17 R15 R23 R53 GetHas_Right R53 has_right R35 R18 R15 R23 R53 GetHas_Left R53 has_left R35 R18 R15 R23 R53 SetHas_Left R23 R53 val R19 R53 has_left R53 val R35 R31 R25 R37 R17 R15 R23 R53 SetHas_Right R23 R53 val R19 R53 has_right R53 val R35 R31 R25 R37 R17 R15 R23 R53 Compare R22 R53 num1 R22 R53 num2 R19 R20 R23 R53 ntb R13 R11 R22 R53 nti R13 R12 R53 ntb R38 R31 R25 R53 nti R53 num2 R35 R36 R43 R31 R26 R53 num1 R35 R53 num2 R35 R40 R53 ntb R38 R31 R53 num1 R35 R53 nti R35 R40 R50 R49 R53 ntb R38 R31 R53 ntb R37 R31 R28 R28 R26 R53 ntb R35 R16 R15 R23 R53 Insert R22 R53 v_key R19 R53 Tree R21 R53 new_node R13 R11 R23 R53 ntb R13 R12 R23 R53 cont R13 R12 R22 R53 key_aux R13 R12 R53 Tree R21 R53 current_node R13 R12 R53 new_node R53 Tree R48 R31 R25 R53 ntb R53 new_node R35 R53 Init R53 v_key R35 R33 R51 R31 R26 R53 current_node R39 R31 R26 R53 cont R37 R31 R26 R53 cont R35 R53 key_aux R53 current_node R35 R53 GetKey R52 R31 R25 R53 v_key R35 R53 key_aux R35 R40 R53 current_node R35 R53 GetHas_Left R52 R53 current_node R53 current_node R35 R53 GetLeft R52 R31 R53 cont R38 R31 R25 R53 ntb R53 current_node R35 R53 SetHas_Left R37 R33 R51 R31 R26 R53 ntb R53 current_node R35 R53 SetLeft R53 new_node R35 R33 R51 R31 R26 R27 R28 R25 R27 R53 current_node R35 R53 GetHas_Right R52 R53 current_node R53 current_node R35 R53 GetRight R52 R31 R53 cont R38 R31 R25 R53 ntb R53 current_node R35 R53 SetHas_Right R37 R33 R51 R31 R26 R53 ntb R53 current_node R35 R53 SetRight R53 new_node R35 R33 R51 R31 R26 R27 R28 R25 R27 R28 R26 R27 R29 R26 R37 R16 R15 R23 R53 Delete R22 R53 v_key R19 R53 Tree R21 R53 current_node R13 R11 R53 Tree R21 R53 parent_node R13 R12 R23 R53 cont R13 R12 R23 R53 found R13 R12 R23 R53 is_root R13 R12 R22 R53 key_aux R13 R12 R23 R53 ntb R13 R12 R53 current_node R39 R31 R25 R53 parent_node R39 R31 R26 R53 cont R37 R31 R26 R53 found R38 R31 R26 R53 is_root R37 R31 R26 R53 cont R35 R53 key_aux R53 current_node R35 R53 GetKey R52 R31 R25 R53 v_key R35 R53 key_aux R35 R40 R53 current_node R35 R53 GetHas_Left R52 R53 parent_node R53 current_node R35 R31 R25 R53 current_node R53 current_node R35 R53 GetLeft R52 R31 R26 R27 R53 cont R38 R31 R28 R53 key_aux R35 R53 v_key R35 R40 R53 current_node R35 R53 GetHas_Right R52 R53 parent_node R53 current_node R35 R31 R25 R53 current_node R53 current_node R35 R53 GetRight R52 R31 R26 R27 R53 cont R38 R31 R28 R53 is_root R35 R53 current_node R35 R49 R53 GetHas_Right R52 R50 R53 current_node R35 R49 R53 GetHas_Left R52 R50 R41 R53 ntb R37 R31 R53 ntb R39 R53 Remove R53 parent_node R35 R53 current_node R35 R33 R34 R51 R31 R28 R53 ntb R39 R53 Remove R53 parent_node R35 R53 current_node R35 R33 R34 R51 R31 R28 R25 R53 found R37 R31 R26 R53 cont R38 R31 R26 R27 R28 R28 R26 R53 is_root R38 R31 R26 R27 R29 R26 R53 found R35 R16 R15 R23 R53 Remove R53 Tree R21 R53 p_node R53 Tree R21 R53 c_node R19 R20 R23 R53 ntb R13 R11 R22 R53 auxkey1 R13 R12 R22 R53 auxkey2 R13 R12 R53 c_node R35 R53 GetHas_Left R52 R53 ntb R39 R53 RemoveLeft R53 p_node R35 R53 c_node R35 R33 R34 R51 R31 R53 c_node R35 R53 GetHas_Right R52 R53 ntb R39 R53 RemoveRight R53 p_node R35 R53 c_node R35 R33 R34 R51 R31 R53 auxkey1 R53 c_node R35 R53 GetKey R52 R31 R25 R53 auxkey2 R53 p_node R35 R53 GetLeft R52 R50 R53 GetKey R52 R31 R26 R39 R53 Compare R53 auxkey1 R35 R53 auxkey2 R35 R33 R34 R51 R53 ntb R53 p_node R35 R53 SetLeft R53 my_null R35 R33 R51 R31 R25 R53 ntb R53 p_node R35 R53 SetHas_Left R38 R33 R51 R31 R26 R27 R53 ntb R53 p_node R35 R53 SetRight R53 my_null R35 R33 R51 R31 R25 R53 ntb R53 p_node R35 R53 SetHas_Right R38 R33 R51 R31 R26 R27 R28 R26 R27 R28 R28 R25 R37 R16 R15 R23 R53 RemoveRight R53 Tree R21 R53 p_node R53 Tree R21 R53 c_node R19 R20 R23 R53 ntb R13 R11 R53 c_node R35 R53 GetHas_Right R52 R53 ntb R53 c_node R35 R53 SetKey R53 c_node R35 R53 GetRight R52 R50 R53 GetKey R52 R33 R51 R31 R25 R53 p_node R53 c_node R35 R31 R26 R53 c_node R53 c_node R35 R53 GetRight R52 R31 R26 R27 R29 R25 R53 ntb R53 p_node R35 R53 SetRight R53 my_null R35 R33 R51 R31 R26 R53 ntb R53 p_node R35 R53 SetHas_Right R38 R33 R51 R31 R26 R37 R16 R15 R23 R53 RemoveLeft R53 Tree R21 R53 p_node R53 Tree R21 R53 c_node R19 R20 R23 R53 ntb R13 R11 R53 c_node R35 R53 GetHas_Left R52 R53 ntb R53 c_node R35 R53 SetKey R53 c_node R35 R53 GetLeft R52 R50 R53 GetKey R52 R33 R51 R31 R25 R53 p_node R53 c_node R35 R31 R26 R53 c_node R53 c_node R35 R53 GetLeft R52 R31 R26 R27 R29 R25 R53 ntb R53 p_node R35 R53 SetLeft R53 my_null R35 R33 R51 R31 R26 R53 ntb R53 p_node R35 R53 SetHas_Left R38 R33 R51 R31 R26 R37 R16 R15 R22 R53 Search R22 R53 v_key R19 R23 R53 cont R13 R11 R22 R53 ifound R13 R12 R53 Tree R21 R53 current_node R13 R12 R22 R53 key_aux R13 R12 R53 current_node R39 R31 R25 R53 cont R37 R31 R26 R53 ifound R36 R31 R26 R53 cont R35 R53 key_aux R53 current_node R35 R53 GetKey R52 R31 R25 R53 v_key R35 R53 key_aux R35 R40 R53 current_node R35 R53 GetHas_Left R52 R53 current_node R53 current_node R35 R53 GetLeft R52 R31 R53 cont R38 R31 R28 R53 key_aux R35 R53 v_key R35 R40 R53 current_node R35 R53 GetHas_Right R52 R53 current_node R53 current_node R35 R53 GetRight R52 R31 R53 cont R38 R31 R28 R53 ifound R36 R31 R25 R53 cont R38 R31 R26 R27 R28 R28 R26 R27 R29 R26 R53 ifound R35 R16 R15 R23 R53 Print R53 Tree R21 R53 current_node R13 R11 R23 R53 ntb R13 R12 R53 current_node R39 R31 R25 R53 ntb R39 R53 RecPrint R53 current_node R35 R33 R51 R31 R26 R37 R16 R15 R23 R53 RecPrint R53 Tree R21 R53 node R19 R23 R53 ntb R13 R11 R53 node R35 R53 GetHas_Left R52 R53 ntb R39 R53 RecPrint R53 node R35 R53 GetLeft R52 R33 R51 R31 R25 R27 R53 ntb R37 R31 R28 R25 R53 node R35 R53 GetKey R52 R30 R26 R53 node R35 R53 GetHas_Right R52 R53 ntb R39 R53 RecPrint R53 node R35 R53 GetRight R52 R33 R51 R31 R25 R27 R53 ntb R37 R31 R28 R26 R37 R16 R15 R7 R6 R2 Rules 
parse-tree:
Program
  MainClass
    CLASS
    IdentifierBinaryTree
    LBRACE{
    PUBLIC
    STATIC
    VOID
    MAIN
    LPAREN(
    String
    LBRACKET[
    RBRACKET]
    Identifiera
    RPAREN)
    LBRACE{
    PrintStatement
      PRINTSystem.out.println
      LPAREN(
      MethodCallExpressionWithoutArgs
        NewClassExpression
          NEWnew
          IdentifierBT
          LPAREN(
          RPAREN)
        PERIOD.
        IdentifierStart
        LPAREN(
        RPAREN)
      RPAREN)
      SEMICOLON;
    RBRACE}
    RBRACE}
  ClassDeclarationList
    ClassDeclaration
      CLASS
      IdentifierBT
      LBRACE{
      MethodDeclaration
        public
        TYPEint
        IdentifierStart
        LPAREN(
        RPAREN)
        LBRACE{
        VarDeclarationList
          VarDeclarationList
            VarDeclaration
              IdentifierTree
              Identifierroot
              SEMICOLON;
            VarDeclaration
              TYPEboolean
              Identifierntb
              SEMICOLON;
          VarDeclaration
            TYPEint
            Identifiernti
            SEMICOLON;
        StatementList
          StatementList
            StatementList
              StatementList
                StatementList
                  StatementList
                    StatementList
                      StatementList
                        StatementList
                          StatementList
                            StatementList
                              StatementList
                                StatementList
                                  StatementList
                                    StatementList
                                      StatementList
                                        StatementList
                                          StatementList
                                            StatementList
                                              StatementList
                                                AssignmentStatement
                                                  Identifierroot
                                                  EQUAL=
                                                  NewClassExpression
                                                    NEWnew
                                                    IdentifierTree
                                                    LPAREN(
                                                    RPAREN)
                                                  SEMICOLON;
                                                AssignmentStatement
                                                  Identifierntb
                                                  EQUAL=
                                                  MethodCallExpression
                                                    Identifierroot
                                                    PERIOD.
                                                    IdentifierInit
                                                    LPAREN(
                                                    INTEGER16
                                                    RPAREN)
                                                  SEMICOLON;
                                              AssignmentStatement
                                                Identifierntb
                                                EQUAL=
                                                MethodCallExpressionWithoutArgs
                                                  Identifierroot
                                                  PERIOD.
                                                  IdentifierPrint
                                                  LPAREN(
                                                  RPAREN)
                                                SEMICOLON;
                                            PrintStatement
                                              PRINTSystem.out.println
                                              LPAREN(
                                              INTEGER100000000
                                              RPAREN)
                                              SEMICOLON;
                                          AssignmentStatement
                                            Identifierntb
                                            EQUAL=
                                            MethodCallExpression
                                              Identifierroot
                                              PERIOD.
                                              IdentifierInsert
                                              LPAREN(
                                              INTEGER8
                                              RPAREN)
                                            SEMICOLON;
                                        AssignmentStatement
                                          Identifierntb
                                          EQUAL=
                                          MethodCallExpressionWithoutArgs
                                            Identifierroot
                                            PERIOD.
                                            IdentifierPrint
                                            LPAREN(
                                            RPAREN)
                                          SEMICOLON;
                                      AssignmentStatement
                                        Identifierntb
                                        EQUAL=
                                        MethodCallExpression
                                          Identifierroot
                                          PERIOD.
                                          IdentifierInsert
                                          LPAREN(
                                          INTEGER24
                                          RPAREN)
                                        SEMICOLON;
                                    AssignmentStatement
                                      Identifierntb
                                      EQUAL=
                                      MethodCallExpression
                                        Identifierroot
                                        PERIOD.
                                        IdentifierInsert
                                        LPAREN(
                                        INTEGER4
                                        RPAREN)
                                      SEMICOLON;
                                  AssignmentStatement
                                    Identifierntb
                                    EQUAL=
                                    MethodCallExpression
                                      Identifierroot
                                      PERIOD.
                                      IdentifierInsert
                                      LPAREN(
                                      INTEGER12
                                      RPAREN)
                                    SEMICOLON;
                                AssignmentStatement
                                  Identifierntb
                                  EQUAL=
                                  MethodCallExpression
                                    Identifierroot
                                    PERIOD.
                                    IdentifierInsert
                                    LPAREN(
                                    INTEGER20
                                    RPAREN)
                                  SEMICOLON;
                              AssignmentStatement
                                Identifierntb
                                EQUAL=
                                MethodCallExpression
                                  Identifierroot
                                  PERIOD.
                                  IdentifierInsert
                                  LPAREN(
                                  INTEGER28
                                  RPAREN)
                                SEMICOLON;
                            AssignmentStatement
                              Identifierntb
                              EQUAL=
                              MethodCallExpression
                                Identifierroot
                                PERIOD.
                                IdentifierInsert
                                LPAREN(
                                INTEGER14
                                RPAREN)
                              SEMICOLON;
                          AssignmentStatement
                            Identifierntb
                            EQUAL=
                            MethodCallExpressionWithoutArgs
                              Identifierroot
                              PERIOD.
                              IdentifierPrint
                              LPAREN(
                              RPAREN)
                            SEMICOLON;
                        PrintStatement
                          PRINTSystem.out.println
                          LPAREN(
                          MethodCallExpression
                            Identifierroot
                            PERIOD.
                            IdentifierSearch
                            LPAREN(
                            INTEGER24
                            RPAREN)
                          RPAREN)
                          SEMICOLON;
                      PrintStatement
                        PRINTSystem.out.println
                        LPAREN(
                        MethodCallExpression
                          Identifierroot
                          PERIOD.
                          IdentifierSearch
                          LPAREN(
                          INTEGER12
                          RPAREN)
                        RPAREN)
                        SEMICOLON;
                    PrintStatement
                      PRINTSystem.out.println
                      LPAREN(
                      MethodCallExpression
                        Identifierroot
                        PERIOD.
                        IdentifierSearch
                        LPAREN(
                        INTEGER16
                        RPAREN)
                      RPAREN)
                      SEMICOLON;
                  PrintStatement
                    PRINTSystem.out.println
                    LPAREN(
                    MethodCallExpression
                      Identifierroot
                      PERIOD.
                      IdentifierSearch
                      LPAREN(
                      INTEGER50
                      RPAREN)
                    RPAREN)
                    SEMICOLON;
                PrintStatement
                  PRINTSystem.out.println
                  LPAREN(
                  MethodCallExpression
                    Identifierroot
                    PERIOD.
                    IdentifierSearch
                    LPAREN(
                    INTEGER12
                    RPAREN)
                  RPAREN)
                  SEMICOLON;
              AssignmentStatement
                Identifierntb
                EQUAL=
                MethodCallExpression
                  Identifierroot
                  PERIOD.
                  IdentifierDelete
                  LPAREN(
                  INTEGER12
                  RPAREN)
                SEMICOLON;
            AssignmentStatement
              Identifierntb
              EQUAL=
              MethodCallExpressionWithoutArgs
                Identifierroot
                PERIOD.
                IdentifierPrint
                LPAREN(
                RPAREN)
              SEMICOLON;
          PrintStatement
            PRINTSystem.out.println
            LPAREN(
            MethodCallExpression
              Identifierroot
              PERIOD.
              IdentifierSearch
              LPAREN(
              INTEGER12
              RPAREN)
            RPAREN)
            SEMICOLON;
        return
        INTEGER0
        SEMICOLON;
        RBRACE}
      RBRACE}
    ClassDeclaration
      CLASS
      IdentifierTree
      LBRACE{
      VarDeclarationList
        VarDeclarationList
          VarDeclarationList
            VarDeclarationList
              VarDeclarationList
                VarDeclaration
                  IdentifierTree
                  Identifierleft
                  SEMICOLON;
                VarDeclaration
                  IdentifierTree
                  Identifierright
                  SEMICOLON;
              VarDeclaration
                TYPEint
                Identifierkey
                SEMICOLON;
            VarDeclaration
              TYPEboolean
              Identifierhas_left
              SEMICOLON;
          VarDeclaration
            TYPEboolean
            Identifierhas_right
            SEMICOLON;
        VarDeclaration
          IdentifierTree
          Identifiermy_null
          SEMICOLON;
      MethodDeclarationList
        MethodDeclarationList
          MethodDeclarationList
            MethodDeclarationList
              MethodDeclarationList
                MethodDeclarationList
                  MethodDeclarationList
                    MethodDeclarationList
                      MethodDeclarationList
                        MethodDeclarationList
                          MethodDeclarationList
                            MethodDeclarationList
                              MethodDeclarationList
                                MethodDeclarationList
                                  MethodDeclarationList
                                    MethodDeclarationList
                                      MethodDeclarationList
                                        MethodDeclarationList
                                          MethodDeclarationList
                                            MethodDeclaration
                                              public
                                              TYPEboolean
                                              IdentifierInit
                                              LPAREN(
                                              ParameterList
                                                TYPEint
                                                Identifierv_key
                                              RPAREN)
                                              LBRACE{
                                              StatementList
                                                StatementList
                                                  AssignmentStatement
                                                    Identifierkey
                                                    EQUAL=
                                                    Identifierv_key
                                                    SEMICOLON;
                                                  AssignmentStatement
                                                    Identifierhas_left
                                                    EQUAL=
                                                    LITERALfalse
                                                    SEMICOLON;
                                                AssignmentStatement
                                                  Identifierhas_right
                                                  EQUAL=
                                                  LITERALfalse
                                                  SEMICOLON;
                                              return
                                              LITERALtrue
                                              SEMICOLON;
                                              RBRACE}
                                            MethodDeclaration
                                              public
                                              TYPEboolean
                                              IdentifierSetRight
                                              LPAREN(
                                              ParameterList
                                                IdentifierTree
                                                Identifierrn
                                              RPAREN)
                                              LBRACE{
                                              AssignmentStatement
                                                Identifierright
                                                EQUAL=
                                                Identifierrn
                                                SEMICOLON;
                                              return
                                              LITERALtrue
                                              SEMICOLON;
                                              RBRACE}
                                          MethodDeclaration
                                            public
                                            TYPEboolean
                                            IdentifierSetLeft
                                            LPAREN(
                                            ParameterList
                                              IdentifierTree
                                              Identifierln
                                            RPAREN)
                                            LBRACE{
                                            AssignmentStatement
                                              Identifierleft
                                              EQUAL=
                                              Identifierln
                                              SEMICOLON;
                                            return
                                            LITERALtrue
                                            SEMICOLON;
                                            RBRACE}
                                        MethodDeclaration
                                          public
                                          IdentifierTree
                                          IdentifierGetRight
                                          LPAREN(
                                          RPAREN)
                                          LBRACE{
                                          return
                                          Identifierright
                                          SEMICOLON;
                                          RBRACE}
                                      MethodDeclaration
                                        public
                                        IdentifierTree
                                        IdentifierGetLeft
                                        LPAREN(
                                        RPAREN)
                                        LBRACE{
                                        return
                                        Identifierleft
                                        SEMICOLON;
                                        RBRACE}
                                    MethodDeclaration
                                      public
                                      TYPEint
                                      IdentifierGetKey
                                      LPAREN(
                                      RPAREN)
                                      LBRACE{
                                      return
                                      Identifierkey
                                      SEMICOLON;
                                      RBRACE}
                                  MethodDeclaration
                                    public
                                    TYPEboolean
                                    IdentifierSetKey
                                    LPAREN(
                                    ParameterList
                                      TYPEint
                                      Identifierv_key
                                    RPAREN)
                                    LBRACE{
                                    AssignmentStatement
                                      Identifierkey
                                      EQUAL=
                                      Identifierv_key
                                      SEMICOLON;
                                    return
                                    LITERALtrue
                                    SEMICOLON;
                                    RBRACE}
                                MethodDeclaration
                                  public
                                  TYPEboolean
                                  IdentifierGetHas_Right
                                  LPAREN(
                                  RPAREN)
                                  LBRACE{
                                  return
                                  Identifierhas_right
                                  SEMICOLON;
                                  RBRACE}
                              MethodDeclaration
                                public
                                TYPEboolean
                                IdentifierGetHas_Left
                                LPAREN(
                                RPAREN)
                                LBRACE{
                                return
                                Identifierhas_left
                                SEMICOLON;
                                RBRACE}
                            MethodDeclaration
                              public
                              TYPEboolean
                              IdentifierSetHas_Left
                              LPAREN(
                              ParameterList
                                TYPEboolean
                                Identifierval
                              RPAREN)
                              LBRACE{
                              AssignmentStatement
                                Identifierhas_left
                                EQUAL=
                                Identifierval
                                SEMICOLON;
                              return
                              LITERALtrue
                              SEMICOLON;
                              RBRACE}
                          MethodDeclaration
                            public
                            TYPEboolean
                            IdentifierSetHas_Right
                            LPAREN(
                            ParameterList
                              TYPEboolean
                              Identifierval
                            RPAREN)
                            LBRACE{
                            AssignmentStatement
                              Identifierhas_right
                              EQUAL=
                              Identifierval
                              SEMICOLON;
                            return
                            LITERALtrue
                            SEMICOLON;
                            RBRACE}
                        MethodDeclaration
                          public
                          TYPEboolean
                          IdentifierCompare
                          LPAREN(
                          ParameterList
                            TYPEint
                            Identifiernum1
                            COMMA,
                            ParameterList
                              TYPEint
                              Identifiernum2
                          RPAREN)
                          LBRACE{
                          VarDeclarationList
                            VarDeclaration
                              TYPEboolean
                              Identifierntb
                              SEMICOLON;
                            VarDeclaration
                              TYPEint
                              Identifiernti
                              SEMICOLON;
                          StatementList
                            StatementList
                              AssignmentStatement
                                Identifierntb
                                EQUAL=
                                LITERALfalse
                                SEMICOLON;
                              AssignmentStatement
                                Identifiernti
                                EQUAL=
                                PlusExpression
                                  Identifiernum2
                                  PLUS+
                                  INTEGER1
                                SEMICOLON;
                            IFStatement
                              IFif
                              LPAREN(
                              lssExpression
                                Identifiernum1
                                LSS<
                                Identifiernum2
                              RPAREN)
                              AssignmentStatement
                                Identifierntb
                                EQUAL=
                                LITERALfalse
                                SEMICOLON;
                              ELSEelse
                              IFStatement
                                IFif
                                LPAREN(
                                ExclamationExpression
                                  EXCLAMATION!
                                  ParenExpression
                                    LPAREN(
                                    lssExpression
                                      Identifiernum1
                                      LSS<
                                      Identifiernti
                                    RPAREN)
                                RPAREN)
                                AssignmentStatement
                                  Identifierntb
                                  EQUAL=
                                  LITERALfalse
                                  SEMICOLON;
                                ELSEelse
                                AssignmentStatement
                                  Identifierntb
                                  EQUAL=
                                  LITERALtrue
                                  SEMICOLON;
                          return
                          Identifierntb
                          SEMICOLON;
                          RBRACE}
                      MethodDeclaration
                        public
                        TYPEboolean
                        IdentifierInsert
                        LPAREN(
                        ParameterList
                          TYPEint
                          Identifierv_key
                        RPAREN)
                        LBRACE{
                        VarDeclarationList
                          VarDeclarationList
                            VarDeclarationList
                              VarDeclarationList
                                VarDeclaration
                                  IdentifierTree
                                  Identifiernew_node
                                  SEMICOLON;
                                VarDeclaration
                                  TYPEboolean
                                  Identifierntb
                                  SEMICOLON;
                              VarDeclaration
                                TYPEboolean
                                Identifiercont
                                SEMICOLON;
                            VarDeclaration
                              TYPEint
                              Identifierkey_aux
                              SEMICOLON;
                          VarDeclaration
                            IdentifierTree
                            Identifiercurrent_node
                            SEMICOLON;
                        StatementList
                          StatementList
                            StatementList
                              StatementList
                                AssignmentStatement
                                  Identifiernew_node
                                  EQUAL=
                                  NewClassExpression
                                    NEWnew
                                    IdentifierTree
                                    LPAREN(
                                    RPAREN)
                                  SEMICOLON;
                                AssignmentStatement
                                  Identifierntb
                                  EQUAL=
                                  MethodCallExpression
                                    Identifiernew_node
                                    PERIOD.
                                    IdentifierInit
                                    LPAREN(
                                    Identifierv_key
                                    RPAREN)
                                  SEMICOLON;
                              AssignmentStatement
                                Identifiercurrent_node
                                EQUAL=
                                this
                                SEMICOLON;
                            AssignmentStatement
                              Identifiercont
                              EQUAL=
                              LITERALtrue
                              SEMICOLON;
                          WHILEStatement
                            WHILEwhile
                            LPAREN(
                            Identifiercont
                            RPAREN)
                            Statement
                              LBRACE{
                              StatementList
                                AssignmentStatement
                                  Identifierkey_aux
                                  EQUAL=
                                  MethodCallExpressionWithoutArgs
                                    Identifiercurrent_node
                                    PERIOD.
                                    IdentifierGetKey
                                    LPAREN(
                                    RPAREN)
                                  SEMICOLON;
                                IFStatement
                                  IFif
                                  LPAREN(
                                  lssExpression
                                    Identifierv_key
                                    LSS<
                                    Identifierkey_aux
                                  RPAREN)
                                  Statement
                                    LBRACE{
                                    IFStatement
                                      IFif
                                      LPAREN(
                                      MethodCallExpressionWithoutArgs
                                        Identifiercurrent_node
                                        PERIOD.
                                        IdentifierGetHas_Left
                                        LPAREN(
                                        RPAREN)
                                      RPAREN)
                                      AssignmentStatement
                                        Identifiercurrent_node
                                        EQUAL=
                                        MethodCallExpressionWithoutArgs
                                          Identifiercurrent_node
                                          PERIOD.
                                          IdentifierGetLeft
                                          LPAREN(
                                          RPAREN)
                                        SEMICOLON;
                                      ELSEelse
                                      Statement
                                        LBRACE{
                                        StatementList
                                          StatementList
                                            AssignmentStatement
                                              Identifiercont
                                              EQUAL=
                                              LITERALfalse
                                              SEMICOLON;
                                            AssignmentStatement
                                              Identifierntb
                                              EQUAL=
                                              MethodCallExpression
                                                Identifiercurrent_node
                                                PERIOD.
                                                IdentifierSetHas_Left
                                                LPAREN(
                                                LITERALtrue
                                                RPAREN)
                                              SEMICOLON;
                                          AssignmentStatement
                                            Identifierntb
                                            EQUAL=
                                            MethodCallExpression
                                              Identifiercurrent_node
                                              PERIOD.
                                              IdentifierSetLeft
                                              LPAREN(
                                              Identifiernew_node
                                              RPAREN)
                                            SEMICOLON;
                                        RBRACE}
                                    RBRACE}
                                  ELSEelse
                                  Statement
                                    LBRACE{
                                    IFStatement
                                      IFif
                                      LPAREN(
                                      MethodCallExpressionWithoutArgs
                                        Identifiercurrent_node
                                        PERIOD.
                                        IdentifierGetHas_Right
                                        LPAREN(
                                        RPAREN)
                                      RPAREN)
                                      AssignmentStatement
                                        Identifiercurrent_node
                                        EQUAL=
                                        MethodCallExpressionWithoutArgs
                                          Identifiercurrent_node
                                          PERIOD.
                                          IdentifierGetRight
                                          LPAREN(
                                          RPAREN)
                                        SEMICOLON;
                                      ELSEelse
                                      Statement
                                        LBRACE{
                                        StatementList
                                          StatementList
                                            AssignmentStatement
                                              Identifiercont
                                              EQUAL=
                                              LITERALfalse
                                              SEMICOLON;
                                            AssignmentStatement
                                              Identifierntb
                                              EQUAL=
                                              MethodCallExpression
                                                Identifiercurrent_node
                                                PERIOD.
                                                IdentifierSetHas_Right
                                                LPAREN(
                                                LITERALtrue
                                                RPAREN)
                                              SEMICOLON;
                                          AssignmentStatement
                                            Identifierntb
                                            EQUAL=
                                            MethodCallExpression
                                              Identifiercurrent_node
                                              PERIOD.
                                              IdentifierSetRight
                                              LPAREN(
                                              Identifiernew_node
                                              RPAREN)
                                            SEMICOLON;
                                        RBRACE}
                                    RBRACE}
                              RBRACE}
                        return
                        LITERALtrue
                        SEMICOLON;
                        RBRACE}
                    MethodDeclaration
                      public
                      TYPEboolean
                      IdentifierDelete
                      LPAREN(
                      ParameterList
                        TYPEint
                        Identifierv_key
                      RPAREN)
                      LBRACE{
                      VarDeclarationList
                        VarDeclarationList
                          VarDeclarationList
                            VarDeclarationList
                              VarDeclarationList
                                VarDeclarationList
                                  VarDeclaration
                                    IdentifierTree
                                    Identifiercurrent_node
                                    SEMICOLON;
                                  VarDeclaration
                                    IdentifierTree
                                    Identifierparent_node
                                    SEMICOLON;
                                VarDeclaration
                                  TYPEboolean
                                  Identifiercont
                                  SEMICOLON;
                              VarDeclaration
                                TYPEboolean
                                Identifierfound
                                SEMICOLON;
                            VarDeclaration
                              TYPEboolean
                              Identifieris_root
                              SEMICOLON;
                          VarDeclaration
                            TYPEint
                            Identifierkey_aux
                            SEMICOLON;
                        VarDeclaration
                          TYPEboolean
                          Identifierntb
                          SEMICOLON;
                      StatementList
                        StatementList
                          StatementList
                            StatementList
                              StatementList
                                AssignmentStatement
                                  Identifiercurrent_node
                                  EQUAL=
                                  this
                                  SEMICOLON;
                                AssignmentStatement
                                  Identifierparent_node
                                  EQUAL=
                                  this
                                  SEMICOLON;
                              AssignmentStatement
                                Identifiercont
                                EQUAL=
                                LITERALtrue
                                SEMICOLON;
                            AssignmentStatement
                              Identifierfound
                              EQUAL=
                              LITERALfalse
                              SEMICOLON;
                          AssignmentStatement
                            Identifieris_root
                            EQUAL=
                            LITERALtrue
                            SEMICOLON;
                        WHILEStatement
                          WHILEwhile
                          LPAREN(
                          Identifiercont
                          RPAREN)
                          Statement
                            LBRACE{
                            StatementList
                              StatementList
                                AssignmentStatement
                                  Identifierkey_aux
                                  EQUAL=
                                  MethodCallExpressionWithoutArgs
                                    Identifiercurrent_node
                                    PERIOD.
                                    IdentifierGetKey
                                    LPAREN(
                                    RPAREN)
                                  SEMICOLON;
                                IFStatement
                                  IFif
                                  LPAREN(
                                  lssExpression
                                    Identifierv_key
                                    LSS<
                                    Identifierkey_aux
                                  RPAREN)
                                  IFStatement
                                    IFif
                                    LPAREN(
                                    MethodCallExpressionWithoutArgs
                                      Identifiercurrent_node
                                      PERIOD.
                                      IdentifierGetHas_Left
                                      LPAREN(
                                      RPAREN)
                                    RPAREN)
                                    Statement
                                      LBRACE{
                                      StatementList
                                        AssignmentStatement
                                          Identifierparent_node
                                          EQUAL=
                                          Identifiercurrent_node
                                          SEMICOLON;
                                        AssignmentStatement
                                          Identifiercurrent_node
                                          EQUAL=
                                          MethodCallExpressionWithoutArgs
                                            Identifiercurrent_node
                                            PERIOD.
                                            IdentifierGetLeft
                                            LPAREN(
                                            RPAREN)
                                          SEMICOLON;
                                      RBRACE}
                                    ELSEelse
                                    AssignmentStatement
                                      Identifiercont
                                      EQUAL=
                                      LITERALfalse
                                      SEMICOLON;
                                  ELSEelse
                                  IFStatement
                                    IFif
                                    LPAREN(
                                    lssExpression
                                      Identifierkey_aux
                                      LSS<
                                      Identifierv_key
                                    RPAREN)
                                    IFStatement
                                      IFif
                                      LPAREN(
                                      MethodCallExpressionWithoutArgs
                                        Identifiercurrent_node
                                        PERIOD.
                                        IdentifierGetHas_Right
                                        LPAREN(
                                        RPAREN)
                                      RPAREN)
                                      Statement
                                        LBRACE{
                                        StatementList
                                          AssignmentStatement
                                            Identifierparent_node
                                            EQUAL=
                                            Identifiercurrent_node
                                            SEMICOLON;
                                          AssignmentStatement
                                            Identifiercurrent_node
                                            EQUAL=
                                            MethodCallExpressionWithoutArgs
                                              Identifiercurrent_node
                                              PERIOD.
                                              IdentifierGetRight
                                              LPAREN(
                                              RPAREN)
                                            SEMICOLON;
                                        RBRACE}
                                      ELSEelse
                                      AssignmentStatement
                                        Identifiercont
                                        EQUAL=
                                        LITERALfalse
                                        SEMICOLON;
                                    ELSEelse
                                    Statement
                                      LBRACE{
                                      StatementList
                                        StatementList
                                          IFStatement
                                            IFif
                                            LPAREN(
                                            Identifieris_root
                                            RPAREN)
                                            IFStatement
                                              IFif
                                              LPAREN(
                                              AndExpression
                                                ParenExpression
                                                  LPAREN(
                                                  MethodCallExpressionWithoutArgs
                                                    ExclamationExpression
                                                      EXCLAMATION!
                                                      Identifiercurrent_node
                                                    PERIOD.
                                                    IdentifierGetHas_Right
                                                    LPAREN(
                                                    RPAREN)
                                                  RPAREN)
                                                AND&&
                                                ParenExpression
                                                  LPAREN(
                                                  MethodCallExpressionWithoutArgs
                                                    ExclamationExpression
                                                      EXCLAMATION!
                                                      Identifiercurrent_node
                                                    PERIOD.
                                                    IdentifierGetHas_Left
                                                    LPAREN(
                                                    RPAREN)
                                                  RPAREN)
                                              RPAREN)
                                              AssignmentStatement
                                                Identifierntb
                                                EQUAL=
                                                LITERALtrue
                                                SEMICOLON;
                                              ELSEelse
                                              AssignmentStatement
                                                Identifierntb
                                                EQUAL=
                                                MethodCallExpression
                                                  this
                                                  PERIOD.
                                                  IdentifierRemove
                                                  LPAREN(
                                                  ExpressionList
                                                    Identifierparent_node
                                                    COMMA,
                                                    Identifiercurrent_node
                                                  RPAREN)
                                                SEMICOLON;
                                            ELSEelse
                                            AssignmentStatement
                                              Identifierntb
                                              EQUAL=
                                              MethodCallExpression
                                                this
                                                PERIOD.
                                                IdentifierRemove
                                                LPAREN(
                                                ExpressionList
                                                  Identifierparent_node
                                                  COMMA,
                                                  Identifiercurrent_node
                                                RPAREN)
                                              SEMICOLON;
                                          AssignmentStatement
                                            Identifierfound
                                            EQUAL=
                                            LITERALtrue
                                            SEMICOLON;
                                        AssignmentStatement
                                          Identifiercont
                                          EQUAL=
                                          LITERALfalse
                                          SEMICOLON;
                                      RBRACE}
                              AssignmentStatement
                                Identifieris_root
                                EQUAL=
                                LITERALfalse
                                SEMICOLON;
                            RBRACE}
                      return
                      Identifierfound
                      SEMICOLON;
                      RBRACE}
                  MethodDeclaration
                    public
                    TYPEboolean
                    IdentifierRemove
                    LPAREN(
                    ParameterList
                      IdentifierTree
                      Identifierp_node
                      COMMA,
                      ParameterList
                        IdentifierTree
                        Identifierc_node
                    RPAREN)
                    LBRACE{
                    VarDeclarationList
                      VarDeclarationList
                        VarDeclaration
                          TYPEboolean
                          Identifierntb
                          SEMICOLON;
                        VarDeclaration
                          TYPEint
                          Identifierauxkey1
                          SEMICOLON;
                      VarDeclaration
                        TYPEint
                        Identifierauxkey2
                        SEMICOLON;
                    IFStatement
                      IFif
                      LPAREN(
                      MethodCallExpressionWithoutArgs
                        Identifierc_node
                        PERIOD.
                        IdentifierGetHas_Left
                        LPAREN(
                        RPAREN)
                      RPAREN)
                      AssignmentStatement
                        Identifierntb
                        EQUAL=
                        MethodCallExpression
                          this
                          PERIOD.
                          IdentifierRemoveLeft
                          LPAREN(
                          ExpressionList
                            Identifierp_node
                            COMMA,
                            Identifierc_node
                          RPAREN)
                        SEMICOLON;
                      ELSEelse
                      IFStatement
                        IFif
                        LPAREN(
                        MethodCallExpressionWithoutArgs
                          Identifierc_node
                          PERIOD.
                          IdentifierGetHas_Right
                          LPAREN(
                          RPAREN)
                        RPAREN)
                        AssignmentStatement
                          Identifierntb
                          EQUAL=
                          MethodCallExpression
                            this
                            PERIOD.
                            IdentifierRemoveRight
                            LPAREN(
                            ExpressionList
                              Identifierp_node
                              COMMA,
                              Identifierc_node
                            RPAREN)
                          SEMICOLON;
                        ELSEelse
                        Statement
                          LBRACE{
                          StatementList
                            StatementList
                              AssignmentStatement
                                Identifierauxkey1
                                EQUAL=
                                MethodCallExpressionWithoutArgs
                                  Identifierc_node
                                  PERIOD.
                                  IdentifierGetKey
                                  LPAREN(
                                  RPAREN)
                                SEMICOLON;
                              AssignmentStatement
                                Identifierauxkey2
                                EQUAL=
                                MethodCallExpressionWithoutArgs
                                  ParenExpression
                                    LPAREN(
                                    MethodCallExpressionWithoutArgs
                                      Identifierp_node
                                      PERIOD.
                                      IdentifierGetLeft
                                      LPAREN(
                                      RPAREN)
                                    RPAREN)
                                  PERIOD.
                                  IdentifierGetKey
                                  LPAREN(
                                  RPAREN)
                                SEMICOLON;
                            IFStatement
                              IFif
                              LPAREN(
                              MethodCallExpression
                                this
                                PERIOD.
                                IdentifierCompare
                                LPAREN(
                                ExpressionList
                                  Identifierauxkey1
                                  COMMA,
                                  Identifierauxkey2
                                RPAREN)
                              RPAREN)
                              Statement
                                LBRACE{
                                StatementList
                                  AssignmentStatement
                                    Identifierntb
                                    EQUAL=
                                    MethodCallExpression
                                      Identifierp_node
                                      PERIOD.
                                      IdentifierSetLeft
                                      LPAREN(
                                      Identifiermy_null
                                      RPAREN)
                                    SEMICOLON;
                                  AssignmentStatement
                                    Identifierntb
                                    EQUAL=
                                    MethodCallExpression
                                      Identifierp_node
                                      PERIOD.
                                      IdentifierSetHas_Left
                                      LPAREN(
                                      LITERALfalse
                                      RPAREN)
                                    SEMICOLON;
                                RBRACE}
                              ELSEelse
                              Statement
                                LBRACE{
                                StatementList
                                  AssignmentStatement
                                    Identifierntb
                                    EQUAL=
                                    MethodCallExpression
                                      Identifierp_node
                                      PERIOD.
                                      IdentifierSetRight
                                      LPAREN(
                                      Identifiermy_null
                                      RPAREN)
                                    SEMICOLON;
                                  AssignmentStatement
                                    Identifierntb
                                    EQUAL=
                                    MethodCallExpression
                                      Identifierp_node
                                      PERIOD.
                                      IdentifierSetHas_Right
                                      LPAREN(
                                      LITERALfalse
                                      RPAREN)
                                    SEMICOLON;
                                RBRACE}
                          RBRACE}
                    return
                    LITERALtrue
                    SEMICOLON;
                    RBRACE}
                MethodDeclaration
                  public
                  TYPEboolean
                  IdentifierRemoveRight
                  LPAREN(
                  ParameterList
                    IdentifierTree
                    Identifierp_node
                    COMMA,
                    ParameterList
                      IdentifierTree
                      Identifierc_node
                  RPAREN)
                  LBRACE{
                  VarDeclaration
                    TYPEboolean
                    Identifierntb
                    SEMICOLON;
                  StatementList
                    StatementList
                      WHILEStatement
                        WHILEwhile
                        LPAREN(
                        MethodCallExpressionWithoutArgs
                          Identifierc_node
                          PERIOD.
                          IdentifierGetHas_Right
                          LPAREN(
                          RPAREN)
                        RPAREN)
                        Statement
                          LBRACE{
                          StatementList
                            StatementList
                              AssignmentStatement
                                Identifierntb
                                EQUAL=
                                MethodCallExpression
                                  Identifierc_node
                                  PERIOD.
                                  IdentifierSetKey
                                  LPAREN(
                                  MethodCallExpressionWithoutArgs
                                    ParenExpression
                                      LPAREN(
                                      MethodCallExpressionWithoutArgs
                                        Identifierc_node
                                        PERIOD.
                                        IdentifierGetRight
                                        LPAREN(
                                        RPAREN)
                                      RPAREN)
                                    PERIOD.
                                    IdentifierGetKey
                                    LPAREN(
                                    RPAREN)
                                  RPAREN)
                                SEMICOLON;
                              AssignmentStatement
                                Identifierp_node
                                EQUAL=
                                Identifierc_node
                                SEMICOLON;
                            AssignmentStatement
                              Identifierc_node
                              EQUAL=
                              MethodCallExpressionWithoutArgs
                                Identifierc_node
                                PERIOD.
                                IdentifierGetRight
                                LPAREN(
                                RPAREN)
                              SEMICOLON;
                          RBRACE}
                      AssignmentStatement
                        Identifierntb
                        EQUAL=
                        MethodCallExpression
                          Identifierp_node
                          PERIOD.
                          IdentifierSetRight
                          LPAREN(
                          Identifiermy_null
                          RPAREN)
                        SEMICOLON;
                    AssignmentStatement
                      Identifierntb
                      EQUAL=
                      MethodCallExpression
                        Identifierp_node
                        PERIOD.
                        IdentifierSetHas_Right
                        LPAREN(
                        LITERALfalse
                        RPAREN)
                      SEMICOLON;
                  return
                  LITERALtrue
                  SEMICOLON;
                  RBRACE}
              MethodDeclaration
                public
                TYPEboolean
                IdentifierRemoveLeft
                LPAREN(
                ParameterList
                  IdentifierTree
                  Identifierp_node
                  COMMA,
                  ParameterList
                    IdentifierTree
                    Identifierc_node
                RPAREN)
                LBRACE{
                VarDeclaration
                  TYPEboolean
                  Identifierntb
                  SEMICOLON;
                StatementList
                  StatementList
                    WHILEStatement
                      WHILEwhile
                      LPAREN(
                      MethodCallExpressionWithoutArgs
                        Identifierc_node
                        PERIOD.
                        IdentifierGetHas_Left
                        LPAREN(
                        RPAREN)
                      RPAREN)
                      Statement
                        LBRACE{
                        StatementList
                          StatementList
                            AssignmentStatement
                              Identifierntb
                              EQUAL=
                              MethodCallExpression
                                Identifierc_node
                                PERIOD.
                                IdentifierSetKey
                                LPAREN(
                                MethodCallExpressionWithoutArgs
                                  ParenExpression
                                    LPAREN(
                                    MethodCallExpressionWithoutArgs
                                      Identifierc_node
                                      PERIOD.
                                      IdentifierGetLeft
                                      LPAREN(
                                      RPAREN)
                                    RPAREN)
                                  PERIOD.
                                  IdentifierGetKey
                                  LPAREN(
                                  RPAREN)
                                RPAREN)
                              SEMICOLON;
                            AssignmentStatement
                              Identifierp_node
                              EQUAL=
                              Identifierc_node
                              SEMICOLON;
                          AssignmentStatement
                            Identifierc_node
                            EQUAL=
                            MethodCallExpressionWithoutArgs
                              Identifierc_node
                              PERIOD.
                              IdentifierGetLeft
                              LPAREN(
                              RPAREN)
                            SEMICOLON;
                        RBRACE}
                    AssignmentStatement
                      Identifierntb
                      EQUAL=
                      MethodCallExpression
                        Identifierp_node
                        PERIOD.
                        IdentifierSetLeft
                        LPAREN(
                        Identifiermy_null
                        RPAREN)
                      SEMICOLON;
                  AssignmentStatement
                    Identifierntb
                    EQUAL=
                    MethodCallExpression
                      Identifierp_node
                      PERIOD.
                      IdentifierSetHas_Left
                      LPAREN(
                      LITERALfalse
                      RPAREN)
                    SEMICOLON;
                return
                LITERALtrue
                SEMICOLON;
                RBRACE}
            MethodDeclaration
              public
              TYPEint
              IdentifierSearch
              LPAREN(
              ParameterList
                TYPEint
                Identifierv_key
              RPAREN)
              LBRACE{
              VarDeclarationList
                VarDeclarationList
                  VarDeclarationList
                    VarDeclaration
                      TYPEboolean
                      Identifiercont
                      SEMICOLON;
                    VarDeclaration
                      TYPEint
                      Identifierifound
                      SEMICOLON;
                  VarDeclaration
                    IdentifierTree
                    Identifiercurrent_node
                    SEMICOLON;
                VarDeclaration
                  TYPEint
                  Identifierkey_aux
                  SEMICOLON;
              StatementList
                StatementList
                  StatementList
                    AssignmentStatement
                      Identifiercurrent_node
                      EQUAL=
                      this
                      SEMICOLON;
                    AssignmentStatement
                      Identifiercont
                      EQUAL=
                      LITERALtrue
                      SEMICOLON;
                  AssignmentStatement
                    Identifierifound
                    EQUAL=
                    INTEGER0
                    SEMICOLON;
                WHILEStatement
                  WHILEwhile
                  LPAREN(
                  Identifiercont
                  RPAREN)
                  Statement
                    LBRACE{
                    StatementList
                      AssignmentStatement
                        Identifierkey_aux
                        EQUAL=
                        MethodCallExpressionWithoutArgs
                          Identifiercurrent_node
                          PERIOD.
                          IdentifierGetKey
                          LPAREN(
                          RPAREN)
                        SEMICOLON;
                      IFStatement
                        IFif
                        LPAREN(
                        lssExpression
                          Identifierv_key
                          LSS<
                          Identifierkey_aux
                        RPAREN)
                        IFStatement
                          IFif
                          LPAREN(
                          MethodCallExpressionWithoutArgs
                            Identifiercurrent_node
                            PERIOD.
                            IdentifierGetHas_Left
                            LPAREN(
                            RPAREN)
                          RPAREN)
                          AssignmentStatement
                            Identifiercurrent_node
                            EQUAL=
                            MethodCallExpressionWithoutArgs
                              Identifiercurrent_node
                              PERIOD.
                              IdentifierGetLeft
                              LPAREN(
                              RPAREN)
                            SEMICOLON;
                          ELSEelse
                          AssignmentStatement
                            Identifiercont
                            EQUAL=
                            LITERALfalse
                            SEMICOLON;
                        ELSEelse
                        IFStatement
                          IFif
                          LPAREN(
                          lssExpression
                            Identifierkey_aux
                            LSS<
                            Identifierv_key
                          RPAREN)
                          IFStatement
                            IFif
                            LPAREN(
                            MethodCallExpressionWithoutArgs
                              Identifiercurrent_node
                              PERIOD.
                              IdentifierGetHas_Right
                              LPAREN(
                              RPAREN)
                            RPAREN)
                            AssignmentStatement
                              Identifiercurrent_node
                              EQUAL=
                              MethodCallExpressionWithoutArgs
                                Identifiercurrent_node
                                PERIOD.
                                IdentifierGetRight
                                LPAREN(
                                RPAREN)
                              SEMICOLON;
                            ELSEelse
                            AssignmentStatement
                              Identifiercont
                              EQUAL=
                              LITERALfalse
                              SEMICOLON;
                          ELSEelse
                          Statement
                            LBRACE{
                            StatementList
                              AssignmentStatement
                                Identifierifound
                                EQUAL=
                                INTEGER1
                                SEMICOLON;
                              AssignmentStatement
                                Identifiercont
                                EQUAL=
                                LITERALfalse
                                SEMICOLON;
                            RBRACE}
                    RBRACE}
              return
              Identifierifound
              SEMICOLON;
              RBRACE}
          MethodDeclaration
            public
            TYPEboolean
            IdentifierPrint
            LPAREN(
            RPAREN)
            LBRACE{
            VarDeclarationList
              VarDeclaration
                IdentifierTree
                Identifiercurrent_node
                SEMICOLON;
              VarDeclaration
                TYPEboolean
                Identifierntb
                SEMICOLON;
            StatementList
              AssignmentStatement
                Identifiercurrent_node
                EQUAL=
                this
                SEMICOLON;
              AssignmentStatement
                Identifierntb
                EQUAL=
                MethodCallExpression
                  this
                  PERIOD.
                  IdentifierRecPrint
                  LPAREN(
                  Identifiercurrent_node
                  RPAREN)
                SEMICOLON;
            return
            LITERALtrue
            SEMICOLON;
            RBRACE}
        MethodDeclaration
          public
          TYPEboolean
          IdentifierRecPrint
          LPAREN(
          ParameterList
            IdentifierTree
            Identifiernode
          RPAREN)
          LBRACE{
          VarDeclaration
            TYPEboolean
            Identifierntb
            SEMICOLON;
          StatementList
            StatementList
              IFStatement
                IFif
                LPAREN(
                MethodCallExpressionWithoutArgs
                  Identifiernode
                  PERIOD.
                  IdentifierGetHas_Left
                  LPAREN(
                  RPAREN)
                RPAREN)
                Statement
                  LBRACE{
                  AssignmentStatement
                    Identifierntb
                    EQUAL=
                    MethodCallExpression
                      this
                      PERIOD.
                      IdentifierRecPrint
                      LPAREN(
                      MethodCallExpressionWithoutArgs
                        Identifiernode
                        PERIOD.
                        IdentifierGetLeft
                        LPAREN(
                        RPAREN)
                      RPAREN)
                    SEMICOLON;
                  RBRACE}
                ELSEelse
                AssignmentStatement
                  Identifierntb
                  EQUAL=
                  LITERALtrue
                  SEMICOLON;
              PrintStatement
                PRINTSystem.out.println
                LPAREN(
                MethodCallExpressionWithoutArgs
                  Identifiernode
                  PERIOD.
                  IdentifierGetKey
                  LPAREN(
                  RPAREN)
                RPAREN)
                SEMICOLON;
            IFStatement
              IFif
              LPAREN(
              MethodCallExpressionWithoutArgs
                Identifiernode
                PERIOD.
                IdentifierGetHas_Right
                LPAREN(
                RPAREN)
              RPAREN)
              Statement
                LBRACE{
                AssignmentStatement
                  Identifierntb
                  EQUAL=
                  MethodCallExpression
                    this
                    PERIOD.
                    IdentifierRecPrint
                    LPAREN(
                    MethodCallExpressionWithoutArgs
                      Identifiernode
                      PERIOD.
                      IdentifierGetRight
                      LPAREN(
                      RPAREN)
                    RPAREN)
                  SEMICOLON;
                RBRACE}
              ELSEelse
              AssignmentStatement
                Identifierntb
                EQUAL=
                LITERALtrue
                SEMICOLON;
          return
          LITERALtrue
          SEMICOLON;
          RBRACE}
      RBRACE}


-*-
Constructing the symbol table for the given testcase


-*-

-*-
The constructed symbol table is being printed



Symbol table of the program 
NAME: BTRECORD: CLASS   TYPE:  BT
NAME: BinaryTreeRECORD: CLASS   TYPE:  int
NAME: TreeRECORD: CLASS   TYPE:  Tree

  Symbol table of the class BT
NAME: thisRECORD: VARIABLE   TYPE:   BT
 NAME: StartRECORD: METHOD   TYPE:   int

Symbol table for the method Start
NAME: ntb RECORD: VARIABLE   TYPE: boolean
NAME: nti RECORD: VARIABLE   TYPE: int
NAME: root RECORD: VARIABLE   TYPE: Tree


  Symbol table of the class BinaryTree
NAME: thisRECORD: VARIABLE   TYPE:   BinaryTree
 NAME: mainRECORD: METHOD   TYPE:   void

Symbol table for the method main
NAME: a RECORD: VARIABLE   TYPE: String[]


  Symbol table of the class Tree
NAME: has_leftRECORD: VARIABLE   TYPE:   boolean
NAME: has_rightRECORD: VARIABLE   TYPE:   boolean
NAME: keyRECORD: VARIABLE   TYPE:   int
NAME: leftRECORD: VARIABLE   TYPE:   Tree
NAME: my_nullRECORD: VARIABLE   TYPE:   Tree
NAME: rightRECORD: VARIABLE   TYPE:   Tree
NAME: thisRECORD: VARIABLE   TYPE:   Tree
 NAME: CompareRECORD: METHOD   TYPE:   boolean
 NAME: DeleteRECORD: METHOD   TYPE:   boolean
 NAME: GetHas_LeftRECORD: METHOD   TYPE:   boolean
 NAME: GetHas_RightRECORD: METHOD   TYPE:   boolean
 NAME: GetKeyRECORD: METHOD   TYPE:   int
 NAME: GetLeftRECORD: METHOD   TYPE:   Tree
 NAME: GetRightRECORD: METHOD   TYPE:   Tree
 NAME: InitRECORD: METHOD   TYPE:   boolean
 NAME: InsertRECORD: METHOD   TYPE:   boolean
 NAME: PrintRECORD: METHOD   TYPE:   boolean
 NAME: RecPrintRECORD: METHOD   TYPE:   boolean
 NAME: RemoveRECORD: METHOD   TYPE:   boolean
 NAME: RemoveLeftRECORD: METHOD   TYPE:   boolean
 NAME: RemoveRightRECORD: METHOD   TYPE:   boolean
 NAME: SearchRECORD: METHOD   TYPE:   int
 NAME: SetHas_LeftRECORD: METHOD   TYPE:   boolean
 NAME: SetHas_RightRECORD: METHOD   TYPE:   boolean
 NAME: SetKeyRECORD: METHOD   TYPE:   boolean
 NAME: SetLeftRECORD: METHOD   TYPE:   boolean
 NAME: SetRightRECORD: METHOD   TYPE:   boolean

Symbol table for the method Compare
NAME: num1 RECORD: PARAMETER   TYPE: int
NAME: num2 RECORD: PARAMETER   TYPE: int
NAME: ntb RECORD: VARIABLE   TYPE: boolean
NAME: nti RECORD: VARIABLE   TYPE: int

Symbol table for the method Delete
NAME: v_key RECORD: PARAMETER   TYPE: int
NAME: cont RECORD: VARIABLE   TYPE: boolean
NAME: current_node RECORD: VARIABLE   TYPE: Tree
NAME: found RECORD: VARIABLE   TYPE: boolean
NAME: is_root RECORD: VARIABLE   TYPE: boolean
NAME: key_aux RECORD: VARIABLE   TYPE: int
NAME: ntb RECORD: VARIABLE   TYPE: boolean
NAME: parent_node RECORD: VARIABLE   TYPE: Tree

Symbol table for the method GetHas_Left

Symbol table for the method GetHas_Right

Symbol table for the method GetKey

Symbol table for the method GetLeft

Symbol table for the method GetRight

Symbol table for the method Init
NAME: v_key RECORD: PARAMETER   TYPE: int

Symbol table for the method Insert
NAME: v_key RECORD: PARAMETER   TYPE: int
NAME: cont RECORD: VARIABLE   TYPE: boolean
NAME: current_node RECORD: VARIABLE   TYPE: Tree
NAME: key_aux RECORD: VARIABLE   TYPE: int
NAME: new_node RECORD: VARIABLE   TYPE: Tree
NAME: ntb RECORD: VARIABLE   TYPE: boolean

Symbol table for the method Print
NAME: current_node RECORD: VARIABLE   TYPE: Tree
NAME: ntb RECORD: VARIABLE   TYPE: boolean

Symbol table for the method RecPrint
NAME: node RECORD: PARAMETER   TYPE: Tree
NAME: ntb RECORD: VARIABLE   TYPE: boolean

Symbol table for the method Remove
NAME: c_node RECORD: PARAMETER   TYPE: Tree
NAME: p_node RECORD: PARAMETER   TYPE: Tree
NAME: auxkey1 RECORD: VARIABLE   TYPE: int
NAME: auxkey2 RECORD: VARIABLE   TYPE: int
NAME: ntb RECORD: VARIABLE   TYPE: boolean

Symbol table for the method RemoveLeft
NAME: c_node RECORD: PARAMETER   TYPE: Tree
NAME: p_node RECORD: PARAMETER   TYPE: Tree
NAME: ntb RECORD: VARIABLE   TYPE: boolean

Symbol table for the method RemoveRight
NAME: c_node RECORD: PARAMETER   TYPE: Tree
NAME: p_node RECORD: PARAMETER   TYPE: Tree
NAME: ntb RECORD: VARIABLE   TYPE: boolean

Symbol table for the method Search
NAME: v_key RECORD: PARAMETER   TYPE: int
NAME: cont RECORD: VARIABLE   TYPE: boolean
NAME: current_node RECORD: VARIABLE   TYPE: Tree
NAME: ifound RECORD: VARIABLE   TYPE: int
NAME: key_aux RECORD: VARIABLE   TYPE: int

Symbol table for the method SetHas_Left
NAME: val RECORD: PARAMETER   TYPE: boolean

Symbol table for the method SetHas_Right
NAME: val RECORD: PARAMETER   TYPE: boolean

Symbol table for the method SetKey
NAME: v_key RECORD: PARAMETER   TYPE: int

Symbol table for the method SetLeft
NAME: ln RECORD: PARAMETER   TYPE: Tree

Symbol table for the method SetRight
NAME: rn RECORD: PARAMETER   TYPE: Tree



-*-

-*-*-
checking of any undeclare variables is done here


-*-*-

-*-*-
check for the identifier types

Assignment error: variable current_node with type on the left side(Tree) does not correspond to the type on the right side
Assignment error: variable current_node with type on the left side(Tree) does not correspond to the type on the right side
Assignment error: variable parent_node with type on the left side(Tree) does not correspond to the type on the right side
Assignment error: variable current_node with type on the left side(Tree) does not correspond to the type on the right side
Assignment error: variable current_node with type on the left side(Tree) does not correspond to the type on the right side
Assignment error: variable ntb with type on the left side(boolean) does not correspond to the type on the right side

-*-*-

